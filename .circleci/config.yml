version: 2.1

jobs:
  codeformat:
    docker:
      - image: rust:1
    steps:
      - checkout
      - restore_cache:
          key: rustfmt-cache-v0
      - run:
          name: Install rustfmt
          command: |
            rustup component add rustfmt
            cargo fmt -- --version
      - run:
          name: Check formatting
          command: |
            cargo fmt -- --check
      - save_cache:
          key: rustfmt-cache-v0
          paths:
            - "~/.cargo"
            - "./target"
  nightly:
    docker:
      - image: rust:1
    steps:
      - checkout
      - restore_cache:
          key: nightly-cache-v0
      - run:
          name: Install nightly rust
          command: |
            rustup install nightly
            rustup run nightly rustc --version --verbose
            rustup run nightly cargo --version --verbose
      - run:
          name: Build
          command: |
            rustup run nightly cargo build
      - run:
          name: Test
          command: rustup run nightly cargo test
      - save_cache:
          key: nightly-cache-v0
          paths:
            - "~/.cargo"
            - "./target"
  stable:
    docker:
      - image: rust:1
    steps:
      - checkout
      - restore_cache:
          key: stable-cache-v0
      - run:
          name: Install stable rust
          command: |
            rustup install stable
            rustup run stable rustc --version --verbose
            rustup run stable cargo --version --verbose
      - run:
          name: Build
          command: |
            rustup run stable cargo build
      - run:
          name: Test
          command: rustup run stable cargo test
      - save_cache:
          key: stable-cache-v0
          paths:
            - "~/.cargo"
            - "./target"
  clippy:
    docker:
      - image: rust:1
    steps:
      - checkout
      - restore_cache:
          key: clippy-cache-v0
      - run:
          name: Install clippy
          command: |
            rustup component add clippy
            cargo clippy --version
      - run:
          name: Check
          command: |
            cargo clippy -- -D warnings
            # also check tests and non-default crate features
            cargo clippy --all-targets --all-features -- -D warnings
      - save_cache:
          key: clippy-cache-v0
          paths:
            - "~/.cargo"
            - "./target"
  codecov:
    docker:
      - image: rust:1
    steps:
      - restore_cache:
          key: codecov-cache-v0
      - run:
          name: Install dependencies
          command: |
            cat /etc/issue
            DEBIAN_FRONTEND=noninteractive apt update -qq
            DEBIAN_FRONTEND=noninteractive apt install -y -qq jq cmake libelf-dev libdw-dev libbfd-dev sudo
      - run:
          name: Install kcov
          command: |
            if [ -f "/opt/kcov/bin/kcov" ]; then
              echo KCov already installed
            else
              mkdir /tmp/kcov
              cd /tmp/kcov
              wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
              tar xzf master.tar.gz
              cd kcov-master
              mkdir build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/kcov
              make -j`nproc`
              sudo make install
            fi
      - checkout
      - run:
          name: Generate and upload codecov report
          command: ./.circleci/codecov.sh
      - save_cache:
          key: codecov-cache-v0
          paths:
            - "~/.cargo"
            - "./target"
            - "/opt/kcov"
  install_instructions:
    # Test that the installation instructions from the README work
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update -qq
            DEBIAN_FRONTEND=noninteractive apt install -y -qq curl sudo libssl-dev pkg-config gcc
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs  > install_rust.sh
            chmod +x install_rust.sh
            ./install_rust.sh -y
      - run:
          name: Install
          command: |
            source ~/.cargo/env
            cargo install --path .
      - run:
          name: Run
          command: |
            source ~/.cargo/env
            crypto-wallet-gen --version
            

workflows:
  version: 2
  codeformat:
    jobs:
      - codeformat
  stable:
    jobs:
      - stable
  nightly:
    jobs:
      - nightly
  clippy:
    jobs:
      - clippy
  codecov:
    jobs:
      - codecov
  install_instructions:
    jobs:
      - install_instructions
